<?php

namespace Utilisateur\UtilisateurBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    public function findByUser1($id_user){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.to =:to')
                    ->having('p.active = 0')
                    ->orderBy('p.id','desc')
                    ->setParameter('to', $id_user);
                    $req->setMaxResults(10);
        return $req->getQuery()->getResult();
    }
    
    public function findBymsg($id){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.id =:message')
                    
                    
                    ->setParameter('message', $id);
                    
        return $req->getQuery()->getResult();
    }
    
    
    public function findByUser2($id_user){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.from =:from')
                    ->having('p.active = 0')
                    ->orderBy('p.id','desc')
                    ->setParameter('from', $id_user);
                    $req->setMaxResults(10);
        return $req->getQuery()->getResult();
    }
    
    public function findByUser3($id_user){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.from =:from')
                    ->having('p.active = 1')
                    ->orderBy('p.id','desc')
                    ->setParameter('from', $id_user);
                    $req->setMaxResults(10);
        return $req->getQuery()->getResult();
    }
    
    public function findByUser($id_user){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.to =:to')
                    ->having('p.active = 0')
                    ->orderBy('p.id','desc')
                    ->setParameter('to', $id_user);
                    $req->setMaxResults(5);
        return $req->getQuery()->getResult();
    }
    
    
    public function getNb($id_user) {
 
        return $this->createQueryBuilder('p')
 
                        ->select('COUNT(p)')
                        ->where('p.to =:to')
                        ->andWhere('p.active = 0')
                        ->orderBy('p.id')
                        ->setParameter('to', $id_user)
                        ->getQuery()
 
                        ->getSingleScalarResult();
 
    }
    
    public function getNb1($id_user) {
 
        return $this->createQueryBuilder('p')
 
                        ->select('COUNT(p)')
                        ->where('p.from =:from')
                        ->andWhere('p.active = 0')
                        ->orderBy('p.id')
                        ->setParameter('from', $id_user)
                        ->getQuery()
 
                        ->getSingleScalarResult();
 
    }
    
    public function getNb2($id_user) {
 
        return $this->createQueryBuilder('p')
 
                        ->select('COUNT(p)')
                        ->where('p.from =:from')
                        ->andWhere('p.active = 1')
                        ->orderBy('p.id')
                        ->setParameter('from', $id_user)
                        ->getQuery()
 
                        ->getSingleScalarResult();
 
    }
}
