<?php

namespace Vworkit\VworkitBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProjetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjetRepository extends EntityRepository 
{
    
    public function findByTitre($titre){
        $req = $this->createQueryBuilder('p')
                    
                    
                    
                    ->select('p')
                    ->where('p.titreProjet =:titre')
                    ->orderBy('p.id')
                    ->setParameter('titre', $titre);
        return $req->getQuery()->getResult();
    }

    public function findByException($user){
        
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.user !=:user')
                    ->orderBy('p.id')
                    ->setParameter('user', $user);
        return $req->getQuery()->getResult();
    }
    
    
    public function byCategorie($categorie){
        $req = $this->createQueryBuilder('p')
                    ->join('p.categorie','f')->select('f')
                    
                    ->where('f.nomCategories =:categorie')
                    ->select('p')
                    ->orderBy('p.id')
                    ->setParameter('categorie', $categorie);
        return $req->getQuery()->getResult();
    }
    
    public function byCompetence($competence){
        $req = $this->createQueryBuilder('t')->join('t.competence', 'u', 'WITH', 'u.nomCompetence = :id')
                    ->setParameter('id', $competence);
        return $req->getQuery()->getResult();
    }
    
    public function byEtat($etat){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.etat =:etat')
                    ->orderBy('p.id')
                    ->setParameter('etat', $etat);
        return $req->getQuery()->getResult();
    }
    
    
    
    public function getNb() {
 
        return $this->createQueryBuilder('p')
 
                        ->select('COUNT(p)')
                        
                        ->getQuery()
 
                        ->getSingleScalarResult();
 
    }
    
    public function byUser($id_user){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.user =:user')
                    ->orderBy('p.id')
                    ->setParameter('user', $id_user);
        return $req->getQuery()->getResult();
    }
    
    public function byBudget($budget){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.budget =:budget')
                    ->orderBy('p.id')
                    ->setParameter('budget', $budget);
        return $req->getQuery()->getResult();
    }
    
    public function byDevise($devise){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.devise =:devise')
                    ->orderBy('p.id')
                    ->setParameter('devise', $devise);
        return $req->getQuery()->getResult();
    }
    
    public function recherche($chaine){
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.titreProjet like :chaine')
                    ->orderBy('p.id')
                    ->setParameter('chaine', '%'.$chaine.'%');
        return $req->getQuery()->getResult();
    }
    
    public function byId($id){
        
        $req = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.id =:id')
                    ->orderBy('p.id')
                    ->setParameter('id', $id);
        return $req->getQuery()->getResult();
    }

    

}
